/*===================================================================
							클래스 고급
	- 상속(Inheritance)
===================================================================*/

// ○ 『super』

//		static으로 선언되지 않은 메소드에서 사용되며,
//		현재 클래스가 상속받은 상위 클래스의 객체를 가리킨다.

//		super는 상위 클래스의 생성자를 호출하거나 상위 클래스의 멤버 변수 또는 메소드를 호출할 때 사용할 수 있다.

//		하위 클래스의 생성자에서 상위 클래스의 생성자를 호출할 때에는
//		하위 클래스의 생성자 정의 구문에서 맨 처음에만 위치할 수 있다.

// ○ 생성자와 클래스의 상속 간의 관계

//		하위 클래스는 상위 클래스의 멤버를 상속받지만, 생성자는 상속 대상에서 제외
//		그리고 하위 클래스의 생성자가 호출될 때 자동으로 상위 클래스의 생성자를 호출
//		이때, 상위 클래스의 생성자는 인수가 없는 생성자(default 생성자 형태)

//		상위 클래스 및 하위 클래스(즉, 상속관계에 있는 클래스)를 설계하는 과정에서
//		상위 클래스의 생성자를 정의하지(작성하지) 않거나 인수가 없는 생성자만을 정의(작성)한 경우
//		명시적으로 하위 클래스에서 상위 클래스의 생성자를 호출하지 않아도 아무런 문제가 발생하지 않지만,
//		상위 클래스에 인자가 있는 생성자만 존재하는 경우 주의해야 한다.

//		예를 들어,
/*
		class A_class
		{
			A_class(int n)
			{
			}
		}

		class B_class extends A_class
		{
			B_class()
			{
				super();
			}
		}
*/
//		하위 클래스인 B_class의 생성자에서 명시적으로 A_class의 생성자를 호출하지 않으면 자동으로 인자 없는 생성자를 호출
//		하지만, A_class 에는 인자가 있는 생성자만 존재하고 인자가 없는 생성자는 존재하지 않기 때문에 에러 발생
//		따라서, B_class 생성자의 선두에 다음처럼 명시적으로 상위 클래스의 생성자 호출 구문을 작성해야 한다.
/*
		class A_class
		{
			A_class(int n)
			{
			}
		}

		class B_class extends A_class
		{
			B_class()
			{
				super(10);
			}
		}
*/

// ○ 상속 시 주의할 사항

//		상위 클래스에서 선언된 멤버 변수의 이름과 같으면 하위 클래스에서 선언된 멤버 변수의 이름이 같으면
//		상위 클래스의 멤버 변수는 무시된다.
//		이때, 상위 클래스의 멤버 변수를 사용하기 위해서는 『super』키워드를 이용

//		동일한 이름의 멤버 변수나 동일한 이름의 메소드가 한 클래스 안에 선언되거나 정의되는 경우 기본적으로 에러 발생
//		단, 메소드의 경우에는 매개변수의 갯수나 타입이 다른 경우 에러 발생하지 않고, 서로 다른 메소드로 취급


// Rect112와 Circle112의 부모 클래스
class SuperTest112
{
	protected double area;
	private String title;

	public SuperTest112()
	{
		System.out.println("Super112... 인자 없는 생성자");
	}

	public SuperTest112(String title)
	{
		this.title = title;
		System.out.println("SuperTest112... 문자열을 인자로 받는 생성자");
	}

	public void write()
	{
		System.out.println(title + " - " + area);
	}
	
}

// SuperTest112 클래스를 상속받는 자식 클래스(단일상속)
class Rect112 extends SuperTest112
{
	private int w, h;
	
	// 자식 클래스 사용자 정의 생성자
	public Rect112()
	{
		// super(); 자동으로 삽입
	}

	public void calc(int w, int h)
	{
		this.w = w;
		this.h = h;
		area = (double)this.w * this.h;
		write();						// -- 상속 받았기 때문에 기본적으로는 안 되지만
										//	  상속에 한해 메소드 오버라이딩(Method Overriding)으로 허용
	}

	// ▶ 메소드 오버라이딩(Method Overriding)
	//		상위 클래스를 상속받은 하위 클래스에서 상위 클래스에 정의된 메소드를 다시 정의하는 것으로(재정의),
	//		객체 지향 프로그래밍의 특징인 다형성을 나타낸다.
	//		재정의(Overriding)는 반드시 상속 관계에 있어야 하며,
	//		메소드, 이름, 리턴 타입, 매개변수의 갯수나 타입이 모두 완전히 일치해야 한다.
	//		접근제어지시자는 수정 가능 (범위 넓히기만 가능)
	
	@Override
		// 어노테이션(annotation) : metadata
		//		메소드 오버라이딩을 통해 덮어쓴 내용이라고 java한테 알려주기 (오류사항 있으면 알려줘!)
	public void write()
	{
		System.out.println("w : " + w + ", h : " + h);
		System.out.println("사각형 - " + area);
	}
}

// SuperTest112 클래스를 상속받는 자식 클래스(단일상속)
class Circle112 extends SuperTest112
{
	// 자식 클래스 사용자 정의 생성자
	public Circle112(String title)
	{
		// super();		-- super(title); 을 지정했기 때문에 생성 X

		super(title);
	}

	public void calc(int r)
	{
		area = r * r * 3.141592;
		write();
	}
}


// main() 메소드를 포함하는 외부의 다른 클래스
public class Test112
{
	public static void main(String[] args)
	{
		// Rect112 클래스(자식 클래스) 기반 인스턴스 생성
		Rect112 ob1 = new Rect112();
		// → Super112... 인자 없는 생성자

		// Circle112 클래스(자식 클래스) 기반 인스턴스 생성
		// Circle112 ob2 = new Circle112();
		// → 컴파일 에러: 사용자 정의 생성자에서 필요로하는 매개변수 부재 (default 생성자 자동 삽입 X)
		
		ob1.calc(10, 5);
		// → w : 10, h : 5
		//	  사각형 - 50.0
	}
}

/*
=========================================================================================
상위 클래스		| 하위 클래스			| 결과
=========================================================================================
생성자를		| 생성자 정의 안함		| ▶ 가능 (default + default)
정의하지		| 인수가 없는 생성자	| ▶ 가능 (default + custom-plain)
않음			| 인수가 있는 생성자	| ▶ 가능 (default + custom)
-----------------------------------------------------------------------------------------
인수가			| 생성자 정의 안함		| ▶ 가능 (custom-plain + default)
없는			| 인수가 없는 생성자	| ▶ 가능 (custom-plain + custom-plain)
생성자만 정의	| 인수가 있는 생성자	| ▶ 가능 (custom-plain + custom)
-----------------------------------------------------------------------------------------
인수가			| 생성자 정의 안함		| ▶ 에러 발생
있는			| 인수가 없는 생성자	| ▶ 자식 클래스 생성자 내에 super(인수); 필요
생성자만 정의	| 인수가 있는 생성자	| ▶ 자식 클래스 생성자 내에 super(인수); 필요
=========================================================================================
*/